/* 
 * Uloq Requestor Service
 *
 * Requestor Endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uloq.SDK.Eccenscia.Services.Models.OpenAPIDateConverter;

namespace Uloq.SDK.Eccenscia.Services.Models.UloqRequestor
{
    /// <summary>
    /// QRCodeResponse
    /// </summary>
    [DataContract]
    public partial class QRCodeResponse : IEquatable<QRCodeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QRCodeResponse" /> class.
        /// </summary>
        /// <param name="notificationIdentifier">The notification identifier for the pending transaction. This identifier is used later to collect the response of the scan later..</param>
        /// <param name="image">The binary data in Base64 for the generated QR code.</param>
        /// <param name="url">The URL embedded in the QR code.</param>
        public QRCodeResponse(string notificationIdentifier = default, string image = default, string url = default)
        {
            NotificationIdentifier = notificationIdentifier;
            Image = image;
            Url = url;
        }

        /// <summary>
        /// The notification identifier for the pending transaction. This identifier is used later to collect the response of the scan later.
        /// </summary>
        /// <value>The notification identifier for the pending transaction. This identifier is used later to collect the response of the scan later.</value>
        [DataMember(Name = "NotificationIdentifier", EmitDefaultValue = false)]
        public string NotificationIdentifier { get; set; }

        /// <summary>
        /// The binary data in Base64 for the generated QR code
        /// </summary>
        /// <value>The binary data in Base64 for the generated QR code</value>
        [DataMember(Name = "Image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// The URL embedded in the QR code
        /// </summary>
        /// <value>The URL embedded in the QR code</value>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QRCodeResponse {\n");
            sb.Append("  NotificationIdentifier: ").Append(NotificationIdentifier).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as QRCodeResponse);
        }

        /// <summary>
        /// Returns true if QRCodeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QRCodeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QRCodeResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    NotificationIdentifier == input.NotificationIdentifier ||
                    NotificationIdentifier != null &&
                    NotificationIdentifier.Equals(input.NotificationIdentifier)
                ) &&
                (
                    Image == input.Image ||
                    Image != null &&
                    Image.Equals(input.Image)
                ) &&
                (
                    Url == input.Url ||
                    Url != null &&
                    Url.Equals(input.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (NotificationIdentifier != null)
                    hashCode = hashCode * 59 + NotificationIdentifier.GetHashCode();
                if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
