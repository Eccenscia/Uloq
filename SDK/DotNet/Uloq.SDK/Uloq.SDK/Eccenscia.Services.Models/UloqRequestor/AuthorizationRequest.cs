/* 
 * Uloq Requestor Service
 *
 * Requestor Endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uloq.SDK.Eccenscia.Services.Models.OpenAPIDateConverter;

namespace Uloq.SDK.Eccenscia.Services.Models.UloqRequestor
{
    /// <summary>
    /// AuthorizationRequest
    /// </summary>
    [DataContract]
    public partial class AuthorizationRequest : IEquatable<AuthorizationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationRequest" /> class.
        /// </summary>
        /// <param name="keyIdentifier">keyIdentifier.</param>
        /// <param name="notificationIdentifier">notificationIdentifier.</param>
        /// <param name="expiryDateUTC">expiryDateUTC.</param>
        /// <param name="category">category.</param>
        /// <param name="actionTitle">actionTitle.</param>
        /// <param name="actionMessage">actionMessage.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="responseQueue">responseQueue.</param>
        public AuthorizationRequest(string keyIdentifier = default, string notificationIdentifier = default, string expiryDateUTC = default, string category = default, string actionTitle = default, string actionMessage = default, string metadata = default, string responseQueue = default)
        {
            KeyIdentifier = keyIdentifier;
            NotificationIdentifier = notificationIdentifier;
            ExpiryDateUTC = expiryDateUTC;
            Category = category;
            ActionTitle = actionTitle;
            ActionMessage = actionMessage;
            Metadata = metadata;
            ResponseQueue = responseQueue;
        }

        /// <summary>
        /// Gets or Sets KeyIdentifier
        /// </summary>
        [DataMember(Name = "KeyIdentifier", EmitDefaultValue = false)]
        public string KeyIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets NotificationIdentifier
        /// </summary>
        [DataMember(Name = "NotificationIdentifier", EmitDefaultValue = false)]
        public string NotificationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDateUTC
        /// </summary>
        [DataMember(Name = "ExpiryDateUTC", EmitDefaultValue = false)]
        public string ExpiryDateUTC { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets ActionTitle
        /// </summary>
        [DataMember(Name = "ActionTitle", EmitDefaultValue = false)]
        public string ActionTitle { get; set; }

        /// <summary>
        /// Gets or Sets ActionMessage
        /// </summary>
        [DataMember(Name = "ActionMessage", EmitDefaultValue = false)]
        public string ActionMessage { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "Metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets ResponseQueue
        /// </summary>
        [DataMember(Name = "ResponseQueue", EmitDefaultValue = false)]
        public string ResponseQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthorizationRequest {\n");
            sb.Append("  KeyIdentifier: ").Append(KeyIdentifier).Append("\n");
            sb.Append("  NotificationIdentifier: ").Append(NotificationIdentifier).Append("\n");
            sb.Append("  ExpiryDateUTC: ").Append(ExpiryDateUTC).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ActionTitle: ").Append(ActionTitle).Append("\n");
            sb.Append("  ActionMessage: ").Append(ActionMessage).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  ResponseQueue: ").Append(ResponseQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AuthorizationRequest);
        }

        /// <summary>
        /// Returns true if AuthorizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    KeyIdentifier == input.KeyIdentifier ||
                    KeyIdentifier != null &&
                    KeyIdentifier.Equals(input.KeyIdentifier)
                ) &&
                (
                    NotificationIdentifier == input.NotificationIdentifier ||
                    NotificationIdentifier != null &&
                    NotificationIdentifier.Equals(input.NotificationIdentifier)
                ) &&
                (
                    ExpiryDateUTC == input.ExpiryDateUTC ||
                    ExpiryDateUTC != null &&
                    ExpiryDateUTC.Equals(input.ExpiryDateUTC)
                ) &&
                (
                    Category == input.Category ||
                    Category != null &&
                    Category.Equals(input.Category)
                ) &&
                (
                    ActionTitle == input.ActionTitle ||
                    ActionTitle != null &&
                    ActionTitle.Equals(input.ActionTitle)
                ) &&
                (
                    ActionMessage == input.ActionMessage ||
                    ActionMessage != null &&
                    ActionMessage.Equals(input.ActionMessage)
                ) &&
                (
                    Metadata == input.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(input.Metadata)
                ) &&
                (
                    ResponseQueue == input.ResponseQueue ||
                    ResponseQueue != null &&
                    ResponseQueue.Equals(input.ResponseQueue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (KeyIdentifier != null)
                    hashCode = hashCode * 59 + KeyIdentifier.GetHashCode();
                if (NotificationIdentifier != null)
                    hashCode = hashCode * 59 + NotificationIdentifier.GetHashCode();
                if (ExpiryDateUTC != null)
                    hashCode = hashCode * 59 + ExpiryDateUTC.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (ActionTitle != null)
                    hashCode = hashCode * 59 + ActionTitle.GetHashCode();
                if (ActionMessage != null)
                    hashCode = hashCode * 59 + ActionMessage.GetHashCode();
                if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                if (ResponseQueue != null)
                    hashCode = hashCode * 59 + ResponseQueue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
