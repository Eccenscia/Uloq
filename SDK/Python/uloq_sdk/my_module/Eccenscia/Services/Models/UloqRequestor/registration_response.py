# coding: utf-8

"""
    Uloq Requestor Service

    Requestor Endpoints  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Eccenscia.Services.Models.configuration import Configuration


class RegistrationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reference_token': 'str',
        'application_identity': 'str',
        'api_key': 'str'
    }

    attribute_map = {
        'reference_token': 'ReferenceToken',
        'application_identity': 'ApplicationIdentity',
        'api_key': 'APIKey'
    }

    def __init__(self, reference_token=None, application_identity=None, api_key=None, local_vars_configuration=None):  # noqa: E501
        """RegistrationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reference_token = None
        self._application_identity = None
        self._api_key = None
        self.discriminator = None

        if reference_token is not None:
            self.reference_token = reference_token
        if application_identity is not None:
            self.application_identity = application_identity
        if api_key is not None:
            self.api_key = api_key

    @property
    def reference_token(self):
        """Gets the reference_token of this RegistrationResponse.  # noqa: E501

        Reference Token supplied during the registration request  # noqa: E501

        :return: The reference_token of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._reference_token

    @reference_token.setter
    def reference_token(self, reference_token):
        """Sets the reference_token of this RegistrationResponse.

        Reference Token supplied during the registration request  # noqa: E501

        :param reference_token: The reference_token of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._reference_token = reference_token

    @property
    def application_identity(self):
        """Gets the application_identity of this RegistrationResponse.  # noqa: E501

        Application public identity - generated  # noqa: E501

        :return: The application_identity of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_identity

    @application_identity.setter
    def application_identity(self, application_identity):
        """Sets the application_identity of this RegistrationResponse.

        Application public identity - generated  # noqa: E501

        :param application_identity: The application_identity of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._application_identity = application_identity

    @property
    def api_key(self):
        """Gets the api_key of this RegistrationResponse.  # noqa: E501

        The generated API key. A new api key is generated with each request  # noqa: E501

        :return: The api_key of this RegistrationResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this RegistrationResponse.

        The generated API key. A new api key is generated with each request  # noqa: E501

        :param api_key: The api_key of this RegistrationResponse.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistrationResponse):
            return True

        return self.to_dict() != other.to_dict()
