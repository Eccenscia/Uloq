# coding: utf-8

"""
    Uloq Requestor Service

    Requestor Endpoints  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Eccenscia.Services.Models.configuration import Configuration


class NotificationDetailsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_identifier': 'str',
        'notification_identifier': 'str',
        'status': 'str',
        'payload': 'list[PayloadObject]',
        'signature': 'str',
        'public_key': 'str',
        'identifier_metadata': 'str'
    }

    attribute_map = {
        'key_identifier': 'KeyIdentifier',
        'notification_identifier': 'NotificationIdentifier',
        'status': 'Status',
        'payload': 'Payload',
        'signature': 'Signature',
        'public_key': 'PublicKey',
        'identifier_metadata': 'IdentifierMetadata'
    }

    def __init__(self, key_identifier=None, notification_identifier=None, status=None, payload=None, signature=None, public_key=None, identifier_metadata=None, local_vars_configuration=None):  # noqa: E501
        """NotificationDetailsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_identifier = None
        self._notification_identifier = None
        self._status = None
        self._payload = None
        self._signature = None
        self._public_key = None
        self._identifier_metadata = None
        self.discriminator = None

        if key_identifier is not None:
            self.key_identifier = key_identifier
        if notification_identifier is not None:
            self.notification_identifier = notification_identifier
        if status is not None:
            self.status = status
        if payload is not None:
            self.payload = payload
        if signature is not None:
            self.signature = signature
        if public_key is not None:
            self.public_key = public_key
        if identifier_metadata is not None:
            self.identifier_metadata = identifier_metadata

    @property
    def key_identifier(self):
        """Gets the key_identifier of this NotificationDetailsResponse.  # noqa: E501

        Base64 string  # noqa: E501

        :return: The key_identifier of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_identifier

    @key_identifier.setter
    def key_identifier(self, key_identifier):
        """Sets the key_identifier of this NotificationDetailsResponse.

        Base64 string  # noqa: E501

        :param key_identifier: The key_identifier of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """

        self._key_identifier = key_identifier

    @property
    def notification_identifier(self):
        """Gets the notification_identifier of this NotificationDetailsResponse.  # noqa: E501


        :return: The notification_identifier of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._notification_identifier

    @notification_identifier.setter
    def notification_identifier(self, notification_identifier):
        """Sets the notification_identifier of this NotificationDetailsResponse.


        :param notification_identifier: The notification_identifier of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """

        self._notification_identifier = notification_identifier

    @property
    def status(self):
        """Gets the status of this NotificationDetailsResponse.  # noqa: E501


        :return: The status of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationDetailsResponse.


        :param status: The status of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Approved", "Declined"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def payload(self):
        """Gets the payload of this NotificationDetailsResponse.  # noqa: E501


        :return: The payload of this NotificationDetailsResponse.  # noqa: E501
        :rtype: list[PayloadObject]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this NotificationDetailsResponse.


        :param payload: The payload of this NotificationDetailsResponse.  # noqa: E501
        :type: list[PayloadObject]
        """

        self._payload = payload

    @property
    def signature(self):
        """Gets the signature of this NotificationDetailsResponse.  # noqa: E501

        Base64 representation of the transaction signature. Order - KeyIdentifier, NotificationIdentifier, Status, Payload (assending order)  # noqa: E501

        :return: The signature of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this NotificationDetailsResponse.

        Base64 representation of the transaction signature. Order - KeyIdentifier, NotificationIdentifier, Status, Payload (assending order)  # noqa: E501

        :param signature: The signature of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def public_key(self):
        """Gets the public_key of this NotificationDetailsResponse.  # noqa: E501


        :return: The public_key of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this NotificationDetailsResponse.


        :param public_key: The public_key of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def identifier_metadata(self):
        """Gets the identifier_metadata of this NotificationDetailsResponse.  # noqa: E501

        Base64 representation of the metadata associated with the identifier  # noqa: E501

        :return: The identifier_metadata of this NotificationDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._identifier_metadata

    @identifier_metadata.setter
    def identifier_metadata(self, identifier_metadata):
        """Sets the identifier_metadata of this NotificationDetailsResponse.

        Base64 representation of the metadata associated with the identifier  # noqa: E501

        :param identifier_metadata: The identifier_metadata of this NotificationDetailsResponse.  # noqa: E501
        :type: str
        """

        self._identifier_metadata = identifier_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationDetailsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationDetailsResponse):
            return True

        return self.to_dict() != other.to_dict()
