# coding: utf-8

"""
    Uloq Requestor Service

    Requestor Endpoints  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from Eccenscia.Services.Models.configuration import Configuration


class AuthorizationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_identifier': 'str',
        'notification_identifier': 'str',
        'expiry_date_utc': 'str',
        'category': 'str',
        'action_title': 'str',
        'action_message': 'str',
        'metadata': 'str',
        'response_queue': 'str'
    }

    attribute_map = {
        'key_identifier': 'KeyIdentifier',
        'notification_identifier': 'NotificationIdentifier',
        'expiry_date_utc': 'ExpiryDateUTC',
        'category': 'Category',
        'action_title': 'ActionTitle',
        'action_message': 'ActionMessage',
        'metadata': 'Metadata',
        'response_queue': 'ResponseQueue'
    }

    def __init__(self, key_identifier=None, notification_identifier=None, expiry_date_utc=None, category=None, action_title=None, action_message=None, metadata=None, response_queue=None, local_vars_configuration=None):  # noqa: E501
        """AuthorizationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_identifier = None
        self._notification_identifier = None
        self._expiry_date_utc = None
        self._category = None
        self._action_title = None
        self._action_message = None
        self._metadata = None
        self._response_queue = None
        self.discriminator = None

        if key_identifier is not None:
            self.key_identifier = key_identifier
        if notification_identifier is not None:
            self.notification_identifier = notification_identifier
        if expiry_date_utc is not None:
            self.expiry_date_utc = expiry_date_utc
        if category is not None:
            self.category = category
        if action_title is not None:
            self.action_title = action_title
        if action_message is not None:
            self.action_message = action_message
        if metadata is not None:
            self.metadata = metadata
        if response_queue is not None:
            self.response_queue = response_queue

    @property
    def key_identifier(self):
        """Gets the key_identifier of this AuthorizationRequest.  # noqa: E501


        :return: The key_identifier of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._key_identifier

    @key_identifier.setter
    def key_identifier(self, key_identifier):
        """Sets the key_identifier of this AuthorizationRequest.


        :param key_identifier: The key_identifier of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._key_identifier = key_identifier

    @property
    def notification_identifier(self):
        """Gets the notification_identifier of this AuthorizationRequest.  # noqa: E501


        :return: The notification_identifier of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_identifier

    @notification_identifier.setter
    def notification_identifier(self, notification_identifier):
        """Sets the notification_identifier of this AuthorizationRequest.


        :param notification_identifier: The notification_identifier of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._notification_identifier = notification_identifier

    @property
    def expiry_date_utc(self):
        """Gets the expiry_date_utc of this AuthorizationRequest.  # noqa: E501


        :return: The expiry_date_utc of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date_utc

    @expiry_date_utc.setter
    def expiry_date_utc(self, expiry_date_utc):
        """Sets the expiry_date_utc of this AuthorizationRequest.


        :param expiry_date_utc: The expiry_date_utc of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._expiry_date_utc = expiry_date_utc

    @property
    def category(self):
        """Gets the category of this AuthorizationRequest.  # noqa: E501


        :return: The category of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AuthorizationRequest.


        :param category: The category of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def action_title(self):
        """Gets the action_title of this AuthorizationRequest.  # noqa: E501


        :return: The action_title of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_title

    @action_title.setter
    def action_title(self, action_title):
        """Sets the action_title of this AuthorizationRequest.


        :param action_title: The action_title of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._action_title = action_title

    @property
    def action_message(self):
        """Gets the action_message of this AuthorizationRequest.  # noqa: E501


        :return: The action_message of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._action_message

    @action_message.setter
    def action_message(self, action_message):
        """Sets the action_message of this AuthorizationRequest.


        :param action_message: The action_message of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._action_message = action_message

    @property
    def metadata(self):
        """Gets the metadata of this AuthorizationRequest.  # noqa: E501


        :return: The metadata of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AuthorizationRequest.


        :param metadata: The metadata of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def response_queue(self):
        """Gets the response_queue of this AuthorizationRequest.  # noqa: E501


        :return: The response_queue of this AuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_queue

    @response_queue.setter
    def response_queue(self, response_queue):
        """Sets the response_queue of this AuthorizationRequest.


        :param response_queue: The response_queue of this AuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._response_queue = response_queue

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthorizationRequest):
            return True

        return self.to_dict() != other.to_dict()
