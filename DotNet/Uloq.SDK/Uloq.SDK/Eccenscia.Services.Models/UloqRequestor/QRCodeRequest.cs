/* 
 * Uloq Requestor Service
 *
 * Requestor Endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uloq.SDK.Eccenscia.Services.Models.OpenAPIDateConverter;

namespace Uloq.SDK.Eccenscia.Services.Models.UloqRequestor
{
    /// <summary>
    /// QRCodeRequest
    /// </summary>
    [DataContract]
    public partial class QRCodeRequest : IEquatable<QRCodeRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines RequestType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RequestTypeEnum
        {
            /// <summary>
            /// Enum Sign for value: Sign
            /// </summary>
            [EnumMember(Value = "Sign")]
            Sign = 1,

            /// <summary>
            /// Enum KeyExchange for value: KeyExchange
            /// </summary>
            [EnumMember(Value = "KeyExchange")]
            KeyExchange = 2

        }

        /// <summary>
        /// Gets or Sets RequestType
        /// </summary>
        [DataMember(Name = "RequestType", EmitDefaultValue = false)]
        public RequestTypeEnum? RequestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QRCodeRequest" /> class.
        /// </summary>
        /// <param name="requestType">requestType.</param>
        /// <param name="category">The Category in which to display this request.</param>
        /// <param name="actionTitle">Title of the approval request.</param>
        /// <param name="actionMessage">Short description of the approval.</param>
        /// <param name="metadata">Additional data related to the approval..</param>
        /// <param name="publicKey">publicKey.</param>
        public QRCodeRequest(RequestTypeEnum? requestType = default, string category = default, string actionTitle = default, string actionMessage = default, string metadata = default, string publicKey = default)
        {
            RequestType = requestType;
            Category = category;
            ActionTitle = actionTitle;
            ActionMessage = actionMessage;
            Metadata = metadata;
            PublicKey = publicKey;
        }

        /// <summary>
        /// The Category in which to display this request
        /// </summary>
        /// <value>The Category in which to display this request</value>
        [DataMember(Name = "Category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Title of the approval request
        /// </summary>
        /// <value>Title of the approval request</value>
        [DataMember(Name = "ActionTitle", EmitDefaultValue = false)]
        public string ActionTitle { get; set; }

        /// <summary>
        /// Short description of the approval
        /// </summary>
        /// <value>Short description of the approval</value>
        [DataMember(Name = "ActionMessage", EmitDefaultValue = false)]
        public string ActionMessage { get; set; }

        /// <summary>
        /// Additional data related to the approval.
        /// </summary>
        /// <value>Additional data related to the approval.</value>
        [DataMember(Name = "Metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Gets or Sets PublicKey
        /// </summary>
        [DataMember(Name = "PublicKey", EmitDefaultValue = false)]
        public string PublicKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QRCodeRequest {\n");
            sb.Append("  RequestType: ").Append(RequestType).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ActionTitle: ").Append(ActionTitle).Append("\n");
            sb.Append("  ActionMessage: ").Append(ActionMessage).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as QRCodeRequest);
        }

        /// <summary>
        /// Returns true if QRCodeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QRCodeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QRCodeRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    RequestType == input.RequestType ||
                    RequestType.Equals(input.RequestType)
                ) &&
                (
                    Category == input.Category ||
                    Category != null &&
                    Category.Equals(input.Category)
                ) &&
                (
                    ActionTitle == input.ActionTitle ||
                    ActionTitle != null &&
                    ActionTitle.Equals(input.ActionTitle)
                ) &&
                (
                    ActionMessage == input.ActionMessage ||
                    ActionMessage != null &&
                    ActionMessage.Equals(input.ActionMessage)
                ) &&
                (
                    Metadata == input.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(input.Metadata)
                ) &&
                (
                    PublicKey == input.PublicKey ||
                    PublicKey != null &&
                    PublicKey.Equals(input.PublicKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + RequestType.GetHashCode();
                if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                if (ActionTitle != null)
                    hashCode = hashCode * 59 + ActionTitle.GetHashCode();
                if (ActionMessage != null)
                    hashCode = hashCode * 59 + ActionMessage.GetHashCode();
                if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                if (PublicKey != null)
                    hashCode = hashCode * 59 + PublicKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
