/* 
 * Uloq Requestor Service
 *
 * Requestor Endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uloq.SDK.Eccenscia.Services.Models.OpenAPIDateConverter;

namespace Uloq.SDK.Eccenscia.Services.Models.UloqRequestor
{
    /// <summary>
    /// PayloadObject
    /// </summary>
    [DataContract]
    public partial class PayloadObject : IEquatable<PayloadObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayloadObject" /> class.
        /// </summary>
        /// <param name="payload">Base64 hashed BSSID from scan results..</param>
        /// <param name="order">Unique order identifier. Used in the determination of the signature packet order.</param>
        public PayloadObject(string payload = default, int order = default)
        {
            Payload = payload;
            Order = order;
        }

        /// <summary>
        /// Base64 hashed BSSID from scan results.
        /// </summary>
        /// <value>Base64 hashed BSSID from scan results.</value>
        [DataMember(Name = "Payload", EmitDefaultValue = false)]
        public string Payload { get; set; }

        /// <summary>
        /// Unique order identifier. Used in the determination of the signature packet order
        /// </summary>
        /// <value>Unique order identifier. Used in the determination of the signature packet order</value>
        [DataMember(Name = "Order", EmitDefaultValue = false)]
        public int Order { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayloadObject {\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PayloadObject);
        }

        /// <summary>
        /// Returns true if PayloadObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PayloadObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayloadObject input)
        {
            if (input == null)
                return false;

            return
                (
                    Payload == input.Payload ||
                    Payload != null &&
                    Payload.Equals(input.Payload)
                ) &&
                (
                    Order == input.Order ||
                    Order.Equals(input.Order)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                hashCode = hashCode * 59 + Order.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
