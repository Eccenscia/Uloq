/* 
 * Uloq Requestor Service
 *
 * Requestor Endpoints
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uloq.SDK.Eccenscia.Services.Models.OpenAPIDateConverter;

namespace Uloq.SDK.Eccenscia.Services.Models.UloqRequestor
{
    /// <summary>
    /// NotificationDetailsRequest
    /// </summary>
    [DataContract]
    public partial class NotificationDetailsRequest : IEquatable<NotificationDetailsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationDetailsRequest" /> class.
        /// </summary>
        /// <param name="notificationIdentifier">notificationIdentifier.</param>
        /// <param name="responseQueue">responseQueue.</param>
        public NotificationDetailsRequest(string notificationIdentifier = default, string responseQueue = default)
        {
            NotificationIdentifier = notificationIdentifier;
            ResponseQueue = responseQueue;
        }

        /// <summary>
        /// Gets or Sets NotificationIdentifier
        /// </summary>
        [DataMember(Name = "NotificationIdentifier", EmitDefaultValue = false)]
        public string NotificationIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ResponseQueue
        /// </summary>
        [DataMember(Name = "ResponseQueue", EmitDefaultValue = false)]
        public string ResponseQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationDetailsRequest {\n");
            sb.Append("  NotificationIdentifier: ").Append(NotificationIdentifier).Append("\n");
            sb.Append("  ResponseQueue: ").Append(ResponseQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NotificationDetailsRequest);
        }

        /// <summary>
        /// Returns true if NotificationDetailsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationDetailsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationDetailsRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    NotificationIdentifier == input.NotificationIdentifier ||
                    NotificationIdentifier != null &&
                    NotificationIdentifier.Equals(input.NotificationIdentifier)
                ) &&
                (
                    ResponseQueue == input.ResponseQueue ||
                    ResponseQueue != null &&
                    ResponseQueue.Equals(input.ResponseQueue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (NotificationIdentifier != null)
                    hashCode = hashCode * 59 + NotificationIdentifier.GetHashCode();
                if (ResponseQueue != null)
                    hashCode = hashCode * 59 + ResponseQueue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
